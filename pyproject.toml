[project]
name = "multi-agent-database-ai-mvp"
version = "0.1.0"
description = "A multi-agent database AI system for intelligent query generation and execution"
authors = [{name = "Your Name", email = "your.email@example.com"}]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Database",
    "Topic :: Scientific/Engineering :: Artificial Intelligence"
]

dependencies = [
    # Core Dependencies
    "fastapi>=0.108.0",
    "sqlalchemy>=2.0.25",
    "uvicorn[standard]>=0.25.0",
    "pydantic>=2.5.0",
    "redis>=5.0.1",
    # Database Dependencies
    "asyncpg>=0.29.0",
    "psycopg2-binary>=2.9.9",
    "pymysql[rsa]>=1.1.0",
    "alembic>=1.13.1",
    # Async Support
    "aiofiles>=23.2.1",
    "aioredis>=2.0.1",
    # Utilities
    "python-dotenv>=1.0.0",
    "pyyaml>=6.0.1",
    "python-multipart>=0.0.6",
    "httpx>=0.25.2",
    "tenacity>=8.2.3",
    # Monitoring and Logging
    "loguru>=0.7.2",
    "prometheus-client>=0.19.0",
    # AI/ML Libraries (for agent intelligence)
    "openai>=1.6.1",
    "langchain>=0.0.350",
    "tiktoken>=0.5.2",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-xdist>=3.5.0",
    "hypothesis>=6.92.1",
    "faker>=20.1.0",

    # Code Quality
    "black[jupyter]>=23.12.0",
    "mypy>=1.8.0",
    "flake8>=7.0.0",
    "flake8-docstrings>=1.7.0",
    "flake8-bugbear>=23.12.2",
    "isort>=5.13.0",
    "bandit>=1.7.6",
    "safety>=3.0.1",

    # Development Tools
    "pre-commit>=3.6.0",
    "ipython>=8.18.1",
    "jupyter>=1.0.0",
    "rich>=13.7.0",
    "typer>=0.9.0",

    # Documentation
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.5.3",
    "mkdocstrings[python]>=0.24.0",

    # Type Stubs
    "types-redis>=4.6.0.11",
    "types-aiofiles>=23.2.0.0",
    "types-pyyaml>=6.0.12.12",

    # Performance Profiling
    "py-spy>=0.3.14",
    "memory-profiler>=0.61.0",
    "line-profiler>=4.1.2",
]

postgres = [
    "asyncpg>=0.29.0",
    "psycopg2-binary>=2.9.9",
]

mysql = [
    "aiomysql>=0.2.0",
    "pymysql[rsa]>=1.1.0",
]

all = [
    "multi-agent-database-ai-mvp[dev,postgres,mysql]",
]

[project.urls]
Homepage = "https://github.com/yourusername/multi-agent-database-ai-mvp"
Documentation = "https://multi-agent-database-ai-mvp.readthedocs.io"
Repository = "https://github.com/yourusername/multi-agent-database-ai-mvp"
Issues = "https://github.com/yourusername/multi-agent-database-ai-mvp/issues"

[project.scripts]
mvp-server = "core.api.main:run"
mvp-cli = "scripts.cli:main"

[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
packages = ["core", "tests", "scripts", "sdk"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.sql"]

[tool.black]
line-length = 100
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | migrations
  | Development-Plan
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
strict = true
plugins = ["pydantic.mypy", "sqlalchemy.ext.mypy.plugin"]
exclude = ["Development-Plan/", "tests/fixtures/"]

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = [
    "redis.*",
    "prometheus_client.*",
    "aioredis.*",
    "langchain.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=core",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=95",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
]

[tool.coverage.run]
source = ["core"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/virtualenv/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if TYPE_CHECKING:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
]

[tool.bandit]
exclude_dirs = ["tests", "scripts"]
skips = ["B101", "B601"]
